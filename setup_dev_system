#!/bin/bash

CPU_NUM=$(cat /proc/cpuinfo | grep -wc processor)

if ! grep -q "SETUP_ENV_MAGIC=142857" ~/.bashrc; then
	echo "
# SETUP_ENV_MAGIC=142857
# my exports
export HISTSIZE=100000
export HISTTIMEFORMAT="%F-%T: "
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:/usr/local/lib:\$HOME/lib:\$LD_LIBRARY_PATH
export CMAKE_ROOT=/usr/local/share/cmake-2.8

# GO ENV
# GO alias
export GOPATH=~/g
export PATH=/usr/local/go/bin:~/g/bin:\$PATH

# PS1
PS1='[\\u@\\H \\w]\\$ '

alias v='ls -l'
alias va='ls -la'
alias ifc='/sbin/ifconfig'
alias supervisorctl='sudo supervisorctl'
alias sp='supervisorctl status'
alias cdd='cd /data/dragon'

echo \$(( 100 * 1024 * 1024 * 1024 )) > /proc/sys/kernel/shmmax

export PATH=/usr/local/bin:\$PATH
" >> ~/.bashrc
fi

# system setting tuning
source ~/.bashrc

# apt-get
apt-get remove -y nano
apt-get autoremove -y

apt-get install -y libunwind8-dev
apt-get install -y libjemalloc-dev libgoogle-perftools-dev
apt-get install -y lib64bz2-1.0 libbz2-dev p7zip-full liblz4-dev zlib1g-dev liblzma-dev
apt-get install -y libboost-all-dev
apt-get install -y libgflags-dev libgoogle-glog-dev libsnappy-dev
apt-get install -y libyaml-cpp-dev libjsoncpp-dev libjansson-dev libcurl4-openssl-dev libtinyxml-dev libc-ares-dev uuid-dev
apt-get install -y libglib2.0-dev

apt-get install -y build-essential gdb # gcc/g++/gdb
apt-get install -y autoconf libtool
apt-get install -y coreutils vim lrzsz sshpass tree exuberant-ctags cmake cmake-curses-gui
apt-get install -y dstat linux-tools-common linux-tools-$(uname -r)
apt-get install -y git-all mercurial bzr subversion git-svn
apt-get install -y supervisor ipython graphviz
apt-get install -y clang-3.5 clang-3.5-doc
apt-get install -y python-setuptools
apt-get install -y nodejs-dev nodejs-legacy npm
apt-get install -y libmysql++-dev

rm -f $(which clang)
rm -f $(which clang++)
ln -sf $(which clang-3.5) /usr/bin/clang
ln -sf $(which clang++-3.5) /usr/bin/clang++

cp ./vimrc ~/.vimrc
mkdir -p ~/vim_backup

# source install
# rocksdb:
ROCKSDB_PKG=  # eg: $HOME/pkg/rocksdb/rocksdb-rocksdb-3.5.tar.gz
if [ -n "$ROCKSDB_PKG" ] ; then
    ./tools/install_rocksdb $ROCKSDB_PKG
fi

# protobuf 3.0 beta
PROTOBUF_PKG="./3rd/protobuf-cpp-3.0.0-beta-1.tar.gz"
if [ -n "$PROTOBUF_PKG" ]; then
    ./tools/install_protobuf $PROTOBUF_PKG
fi

# TODO(zog): sanity_check
